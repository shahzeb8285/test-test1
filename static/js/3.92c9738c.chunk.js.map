{"version":3,"sources":["hooks/useTokenBalance.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","utils/lotteryUtils.js","components/Input/Input.tsx","hooks/useBuyLottery.ts","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx"],"names":["useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","multiCall","abi","calls","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","newCalls","slice","calldata","toLowerCase","encodeFunctionData","aggregate","returnData","concat","index","decodeFunctionResult","multiBuy","lotteryContract","price","numbersList","times","pow","toString","send","from","on","tx","transactionHash","console","error","getTickets","ticketsContract","customLotteryNum","issueIndex","issueIdex","getTicketsAmount","calls1","Array","apply","options","address","ticketAbi","tokenIds","id","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","push","calls3","tickets","getLotteryStatus","multiClaim","claimedStatus","unClaimedIds","filter","lotteryAbi","rewards","finanltokenIds","r","getTotalClaim","drawed","calls4","claim","reduce","p","c","sum","getTotalRewards","getMax","maxNumber","getLotteryIssueIndex","getMatchingRewardLength","matchNumber","historyAmount","amount","getWinningNumbers","numbers","parseInt","historyNumbers","winningNumbers","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","useMultiClaimLottery","useLottery","lotteryTicketContract","useLotteryTicket","onMultiClaim","useCallback","txHash","useMultiBuyLottery","onMultiBuy","useMaxNumber","max","setMax","fetchMax","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TicketInput","symbol","availableSymbol","onSelectMax","TranslateString","useI18n","onClick","toLocaleString","BuyTicketModal","onDismiss","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","useMemo","getFullDisplayBalance","maxTickets","handleBuy","Math","floor","random","handleSelectMax","Number","title","e","currentTarget","Tips","Announce","Final","fullWidth","variant","disabled"],"mappings":"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","file":"static/js/3.92c9738c.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport ticketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { getMulticallAddress } from './addressHelpers'\n\nexport const multiCall = async (abi, calls) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract(MultiCallAbi, getMulticallAddress())\n  const itf = new Interface(abi)\n  let res = []\n  if (calls.length > 100) {\n    let i = 0\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n      const { returnData } = await multi.methods.aggregate(calldata).call()\n      i++\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\n    }\n  } else {\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n    const { returnData } = await multi.methods.aggregate(calldata).call()\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\n  }\n  return res\n}\n\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIdex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\n  const length = await getTicketsAmount(ticketsContract, account)\n\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n  const ticketIssues = await multiCall(ticketAbi, calls2)\n\n  const finalTokenids = []\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (ticketIssue.toString() === issueIdex) {\n      finalTokenids.push(tokenIds[i])\n    }\n  })\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\n  const tickets = await multiCall(ticketAbi, calls3)\n\n  await getLotteryStatus(lotteryContract)\n  return tickets\n}\n\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.methods.balanceOf(account).call()\n}\n\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.methods.issueIndex().call()\n  const length = await getTicketsAmount(ticketsContract, account)\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n  const claimedStatus = await multiCall(ticketAbi, calls2)\n\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\n\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n  const rewards = await multiCall(lotteryAbi, calls3)\n\n  let finanltokenIds = []\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finanltokenIds.push(unClaimedIds[i])\n    }\n  })\n\n  if (finanltokenIds.length > 200) {\n    finanltokenIds = finanltokenIds.slice(0, 200)\n  }\n\n  try {\n    return lotteryContract.methods\n      .multiClaim(finanltokenIds)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIdex = await lotteryContract.methods.issueIndex().call()\n    const length = await getTicketsAmount(ticketsContract, account)\n    // eslint-disable-next-line prefer-spread\n    const calls1 = Array.apply(null, { length }).map((a, i) => [\n      ticketsContract.options.address,\n      'tokenOfOwnerByIndex',\n      [account, i],\n    ])\n    const res = await multiCall(ticketAbi, calls1)\n    const tokenIds = res.map((id) => id.toString())\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n    const ticketIssues = await multiCall(ticketAbi, calls2)\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n    const claimedStatus = await multiCall(ticketAbi, calls3)\n\n    const drawed = await getLotteryStatus(lotteryContract)\n\n    const finalTokenids = []\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIdex) {\n      } else if (!claimedStatus[i][0]) {\n        finalTokenids.push(tokenIds[i])\n      }\n    })\n\n    const calls4 = finalTokenids.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n\n    const rewards = await multiCall(lotteryAbi, calls4)\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BigNumber(0))\n\n    return claim\n  } catch (err) {\n    console.error(err)\n  }\n  return BigNumber(0)\n}\n\nexport const getTotalRewards = async (lotteryContract) => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\n  return lotteryContract.methods.getTotalRewards(issueIdex).call()\n}\n\nexport const getMax = async (lotteryContract) => {\n  return lotteryContract.methods.maxNumber().call()\n}\n\nexport const getLotteryIssueIndex = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return issueIndex\n}\n\nexport const getLotteryStatus = async (lotteryContract) => {\n  return lotteryContract.methods.drawed().call()\n}\n\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIdex = await lotteryContract.methods.issueIndex().call()\n  const drawed = await lotteryContract.methods.drawed().call()\n  if (!drawed) {\n    issueIdex -= 1\n  }\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIdex, 5 - matchNumber).call()\n    return amount / 1e18 / 10\n  } catch (err) {\n    console.error(err)\n  }\n  return 0\n}\n\nexport const getWinningNumbers = async (lotteryContract) => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\n  const numbers = []\n  const drawed = await lotteryContract.methods.drawed().call()\n\n  if (!drawed && parseInt(issueIdex, 10) === 0) {\n    return [0, 0, 0, 0]\n  }\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIdex - 1, i).call()).toString())\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\n    }\n  }\n  return numbers\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\n\nexport const useMultiClaimLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n  const lotteryTicketContract = useLotteryTicket()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\n      return txHash\n    } catch (e) {\n      return false\n    }\n  }, [account, lotteryContract, lotteryTicketContract])\n\n  return { onMultiClaim: handleClaim }\n}\n\nexport const useMultiBuyLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n\n  const handleBuy = useCallback(\n    async (amount: string, numbers: Array<any>) => {\n      try {\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\n        return txHash\n      } catch (e) {\n        return false\n      }\n    },\n    [account, lotteryContract],\n  )\n\n  return { onMultiBuy: handleBuy }\n}\n\nexport const useMaxNumber = () => {\n  const [max, setMax] = useState(5)\n  const lotteryContract = useLottery()\n\n  const fetchMax = useCallback(async () => {\n    const maxNumber = await getMax(lotteryContract)\n    setMax(maxNumber)\n  }, [lotteryContract])\n\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchMax()\n    }\n  }, [lotteryContract, fetchMax])\n\n  return max\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  availableSymbol: string\n  onSelectMax?: () => void\n}\n\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTokenInput>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      <StyledMaxText>{TranslateString(454, `${max.toLocaleString()} ${availableSymbol} Available`)}</StyledMaxText>\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TicketInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\nimport useI18n from 'hooks/useI18n'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onConfirm?: (amount: string, numbers: Array<number>) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(new BigNumber(10))))\n  }, [max])\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\n\n  const { onMultiBuy } = useMultiBuyLottery()\n  const maxNumber = useMaxNumber()\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() => [\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n      ])\n      const txHash = await onMultiBuy('1', numbers)\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > 50) {\n      setVal('50')\n    } else {\n      setVal(maxTickets.toString())\n    }\n  }, [maxTickets])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * 1\n  }\n  return (\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol=\"TICKET\"\n        availableSymbol=\"PRV\"\n      />\n      <div>\n        <Tips>{TranslateString(456, 'Your amount must be a multiple of 1 PRV')}</Tips>\n        <Tips>{TranslateString(458, '1 Ticket = 1 PRV')}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {TranslateString(\n            478,\n            'Ticket purchases are final. Your PRV cannot be returned to you after buying tickets.',\n          )}\n        </Announce>\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} PRV`)}</Final>\n      </div>\n      <ModalActions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          id=\"lottery-buy-complete\"\n          fullWidth\n          disabled={pendingTx || parseInt(val) > Number(maxTickets) || parseInt(val) > 50 || parseInt(val) < 1}\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #ed4b9e;\n`\n"],"sourceRoot":""}