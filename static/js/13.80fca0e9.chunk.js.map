{"version":3,"sources":["utils/callHelpers.ts","components/UnlockButton.tsx","hooks/useTokenBalance.ts","views/Home/components/CardValue.tsx","hooks/useApprove.ts","hooks/useAllowance.ts","utils/forestUtils.ts","views/Forest/components/Hero.tsx","components/Popover/index.tsx","hooks/useInterval.ts","components/Tooltip/index.tsx","components/QuestionHelper/index.tsx","views/Forest/components/TillCollapseCard.tsx","views/Forest/components/WoodButton.tsx","views/Forest/components/ParticipateCard.tsx","hooks/usePastEvents.ts","views/Forest/components/LastEventsCard.tsx","views/Forest/components/ActualKing.tsx","views/Forest/Forest.tsx"],"names":["approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","BigNumber","times","pow","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","participateForest","blackContract","participate","gasPrice","soushHarvest","soushHarvestBnb","claimForest","claimReward","UnlockButton","props","TranslateString","useI18n","useWallet","connect","reset","onPresentConnectModal","useWalletModal","onClick","color","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","cakeContract","getContract","cakeABI","getCakeAddress","call","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","ethereum","fastRefresh","getTokenBalance","res","CardValue","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","useApprove","dispatch","useDispatch","useMasterchef","onApprove","useCallback","fetchFarmUserDataAsync","useLotteryApprove","useCake","lotteryContract","useLottery","useForestApprove","forestContract","useForest","useLotteryAllowance","allowance","setAllowance","fetchAllowance","getAllowance","refreshInterval","setInterval","clearInterval","useForestAllowance","getLastBidTime","lastBidTime","getLastBidder","lastBidder","getHasWinner","hasWinner","getNextStartTime","nextStartTime","getBidAmount","bidAmount","getEndDelay","endDelay","getAllForestData","parseInt","_endDelay","endOfAuction","Title","styled","Heading","attrs","as","size","theme","colors","secondary","Blurb","Text","StyledHero","div","StyledContainer","Container","mediaQueries","sm","LeftWrapper","lg","Hero","style","width","PopoverContainer","show","invertedContrast","tertiary","transparentize","textSubtle","ReferenceElement","Arrow","Popover","content","children","placement","referenceElement","setReferenceElement","popperElement","setPopperElement","arrowElement","setArrowElement","usePopper","strategy","modifiers","name","offset","element","styles","attributes","callback","delay","leading","savedCallback","tick","id","useInterval","ref","popper","className","arrow","TooltipContainer","Tooltip","text","rest","QuestionWrapper","QuestionHelper","setShow","open","close","marginLeft","onMouseEnter","onMouseLeave","StyledCard","Card","PapaFrame","Adventure","QuesionHelperPositioner","TillCollapseCard","seedPriceInUsd","usePriceCakeBusd","balanceInUsd","multipliedBy","isWaitingForNextGame","Date","now","isRunning","mb","date","parseFloat","getFullDisplayBalance","marginTop","mr","mt","StyledDiv","StyledSpan","span","WoodButton","onBid","disabled","currentText","useSound","play","StyledTokenViewer","input","radii","default","spacing","ParticipateCard","max","pendingTx","setPendingTx","fullBalance","useMemo","bid","getBalanceNumber","toFixed","onSubmit","console","error","handleApprove","toNumber","variant","fullWidth","getPastEventsByBlocksStep","contract","eventName","filter","step","web3","getWeb3","eth","getBlockNumber","lastBlockNumber","currentBlock","chunks","push","Math","min","Promise","all","map","chunk","getPastEvents","fromBlock","toBlock","then","chunksData","data","forEach","concat","events","usePastEvents","loading","setLoading","fetchEvents","fetch","Events","formatWins","wins","win","type","author","returnValues","formatBids","bids","LastEventsCard","setData","loadingWins","fetchWins","loadingBids","fetchBids","sort","b","blockNumber","slice","catch","e","info","lastEvents","useLastEvents","length","event","alignItems","justifyContent","marginRight","href","external","ActualKing","isClaiming","setIsClaiming","onClaim","ml","Cards","BaseLayout","GridItem","CardBody","marginBottom","Grid","pastDraw","Forest","forestData","setForestData","ultraRefresh","allForestData","Page","background","boxShadow","textAlign","alignSelf"],"mappings":"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","file":"static/js/13.80fca0e9.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const participateForest = async (blackContract, amount, account) => {\n  // console.log('amount', new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n  return blackContract.methods\n    .participate(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    // .participate(\"2\", 100)\n    .send({ from: account, gasPrice: '7000000000'  })\n    .on('transactionHash', (tx) => {\n      return tx\n    })\n}\n\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const claimForest = async (blackContract, account) => {\n  return blackContract.methods\n    .claimReward()\n    .send({ from: account})\n    .on('transactionHash', (tx) => {\n      return tx\n    })\n}\n","import React from 'react'\nimport { Button, useWalletModal, Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      <Text color=\"black\">{TranslateString(292, 'Unlock Wallet')}</Text>\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text color=\"textSubtle\" bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery, useForest } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\nexport const useForestApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const forestContract = useForest()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, forestContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, forestContract])\n\n  return { onApprove: handleApprove }\n}\n\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useForest, useLottery } from './useContract'\nimport { getAllowance } from '../utils/erc20'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\nexport const useForestAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const forestContract = useForest()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, forestContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, forestContract])\n\n  return allowance\n}\n","const getLastBidTime = (forestContract) => {\n  return forestContract.methods.lastBidTime().call()\n}\n\n const getLastBidder = (forestContract) => {\n  return forestContract.methods.lastBidder().call()\n}\n\n const getHasWinner = (forestContract) => {\n  return forestContract.methods.hasWinner().call()\n}\n\n const getNextStartTime = (forestContract) => {\n  return forestContract.methods.nextStartTime().call()\n}\n\n const getBidAmount = (forestContract) => {\n  return forestContract.methods.bidAmount().call()\n}\n\nconst getEndDelay = (forestContract) => {\n  return forestContract.methods.endDelay().call()\n}\n\n// export const getCollapseData = async (forestContract) => {\n//   const lastBidTime = parseInt(await getLastBidTime(forestContract))\n//   const endDelay = parseInt(await getEndDelay(forestContract))\n\n//   return {\n//     lastBidTime,\n//     endDelay,\n//     collapseDate: (lastBidTime + endDelay) * 1000,\n//   }\n// }\n\n// Fetch all data in one function\n// It would be better to have a structure to fetch from the smart contract\n\n// eslint-disable-next-line import/prefer-default-export\nexport const getAllForestData = async (forestContract) => {\n  const lastBidder = await getLastBidder(forestContract)\n  const hasWinner = await getHasWinner(forestContract)\n  const nextStartTime = await getNextStartTime(forestContract)\n  const bidAmount = await getBidAmount(forestContract)\n  const lastBidTime = parseInt(await getLastBidTime(forestContract))\n  const _endDelay = parseInt(await getEndDelay(forestContract))\n  const endOfAuction = (lastBidTime + _endDelay) * 1000\n  return {\n    lastBidTime,\n    lastBidder,\n    hasWinner,\n    nextStartTime,\n    bidAmount,\n    endOfAuction,\n  }\n}","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text } from '@pancakeswap-libs/uikit'\n// import { useGetMaxBet } from 'hooks/useMaxBet'\n// import { useMoneyWheel, useCake } from 'hooks/useContract'\nimport useI18n from 'hooks/useI18n'\nimport Container from 'components/layout/Container'\n// import king from '../../../../assets/img/king.png'\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.secondary};\n  margin-bottom: 24px;\n`\n\nconst Blurb = styled(Text)`\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n`\n\nconst StyledHero = styled.div`\n  // background: linear-gradient(rgb(142 199 97) 0%, rgb(59 183 143) 76.22%);\n  padding-bottom: 40px;\n  padding-top: 40px;\n  margin-bottom: 2em;\n`\n\nconst StyledContainer = styled(Container)`\n  display: flex;\n\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`\n\nconst LeftWrapper = styled.div`\n  flex: 1;\n  padding-right: 0;\n  width:100%;\n  text-align:center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-right: 32px;\n  }\n`\n\nconst RightWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n  padding-left: 0;\n  margin-top: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0;\n    padding-left: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-left: 32px;\n  }\n`\n\nconst Hero = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledHero>\n      <StyledContainer>\n        <LeftWrapper>\n        <Title style={{ color: 'white' ,\n          width:\"auto\",}}>{TranslateString(999, 'Hack the Vaults')}</Title>\n          {/* <div style={{height:1,\n          width:\"10%\",\n          alignContent:\"center\",\n          alignItems:\"center\",\n          flex:1,\n            background:\"white\"}}/> */}\n          <Blurb>{TranslateString(999, 'Battle other users to become the new king !')}</Blurb>\n          <h4 style={{ color: 'white' }}>{TranslateString(999, 'Win 60% of the pot, next pot 20%, burn 15%, treasury address 5%')}</h4>\n        </LeftWrapper>\n        {/* <RightWrapper>\n        <img src=\"\" alt=\"greenwheel\" style={{ width: '35%', marginTop: '-20px', display: 'block' }} />\n        </RightWrapper> */}\n      </StyledContainer>\n    </StyledHero>\n  )\n}\n\nexport default Hero\n","import React, { useCallback, useState } from 'react'\nimport { Placement } from '@popperjs/core'\nimport { transparentize } from 'polished'\nimport { usePopper } from 'react-popper'\nimport styled from 'styled-components'\nimport Portal from '@reach/portal'\nimport useInterval from '../../hooks/useInterval';\n\nconst PopoverContainer = styled.div<{ show: boolean }>`\n  z-index: 9999;\n\n  visibility: ${(props) => (props.show ? 'visible' : 'hidden')};\n  opacity: ${(props) => (props.show ? 1 : 0)};\n  transition: visibility 150ms linear, opacity 150ms linear;\n\n  background: ${({ theme }) => theme.colors.invertedContrast};\n  border: 1px solid ${({ theme }) => theme.colors.tertiary};\n  box-shadow: 0 4px 8px 0 ${transparentize(0.9, '#2F80ED')};\n  color: ${({ theme }) => theme.colors.textSubtle};\n  border-radius: 8px;\n`\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nconst Arrow = styled.div`\n  width: 8px;\n  height: 8px;\n  z-index: 9998;\n\n  ::before {\n    position: absolute;\n    width: 8px;\n    height: 8px;\n    z-index: 9998;\n\n    content: '';\n    border: 1px solid ${({ theme }) => theme.colors.tertiary};\n    transform: rotate(45deg);\n    background: ${({ theme }) => theme.colors.invertedContrast};\n  }\n\n  &.arrow-top {\n    bottom: -5px;\n    ::before {\n      border-top: none;\n      border-left: none;\n    }\n  }\n\n  &.arrow-bottom {\n    top: -5px;\n    ::before {\n      border-bottom: none;\n      border-right: none;\n    }\n  }\n\n  &.arrow-left {\n    right: -5px;\n\n    ::before {\n      border-bottom: none;\n      border-left: none;\n    }\n  }\n\n  &.arrow-right {\n    left: -5px;\n    ::before {\n      border-right: none;\n      border-top: none;\n    }\n  }\n`\n\nexport interface PopoverProps {\n  content: React.ReactNode\n  show: boolean\n  children: React.ReactNode\n  placement?: Placement\n}\n\nexport default function Popover({ content, show, children, placement = 'auto' }: PopoverProps) {\n  const [referenceElement, setReferenceElement] = useState<HTMLDivElement | null>(null)\n  const [popperElement, setPopperElement] = useState<HTMLDivElement | null>(null)\n  const [arrowElement, setArrowElement] = useState<HTMLDivElement | null>(null)\n  const { styles, update, attributes } = usePopper(referenceElement, popperElement, {\n    placement,\n    strategy: 'fixed',\n    modifiers: [\n      { name: 'offset', options: { offset: [8, 8] } },\n      { name: 'arrow', options: { element: arrowElement } },\n    ],\n  })\n  const updateCallback = useCallback(() => {\n    if (update) {\n      update()\n    }\n  }, [update])\n  useInterval(updateCallback, show ? 100 : null)\n\n  return (\n    <>\n      <ReferenceElement ref={setReferenceElement as any}>{children}</ReferenceElement>\n      <Portal>\n        <PopoverContainer show={show} ref={setPopperElement as any} style={styles.popper} {...attributes.popper}>\n          {content}\n          <Arrow\n            className={`arrow-${attributes.popper?.['data-popper-placement'] ?? ''}`}\n            ref={setArrowElement as any}\n            style={styles.arrow}\n            {...attributes.arrow}\n          />\n        </PopoverContainer>\n      </Portal>\n    </>\n  )\n}\n","import { useEffect, useRef } from 'react'\n\nexport default function useInterval(callback: () => void, delay: null | number, leading = true) {\n  const savedCallback = useRef<() => void>()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      const { current } = savedCallback\n      if (current) {\n        current()\n      }\n    }\n\n    if (delay !== null) {\n      if (leading) tick()\n      const id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n    return undefined\n  }, [delay, leading])\n}\n","import React, { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport Popover, { PopoverProps } from '../Popover'\n\nconst TooltipContainer = styled.div`\n  width: 228px;\n  padding: 0.6rem 1rem;\n  line-height: 150%;\n  font-weight: 400;\n`\n\ninterface TooltipProps extends Omit<PopoverProps, 'content'> {\n  text: string\n}\n\nexport default function Tooltip({ text, ...rest }: TooltipProps) {\n  return <Popover content={<TooltipContainer>{text}</TooltipContainer>} {...rest} />\n}\n\nexport function MouseoverTooltip({ children, ...rest }: Omit<TooltipProps, 'show'>) {\n  const [show, setShow] = useState(false)\n  const open = useCallback(() => setShow(true), [setShow])\n  const close = useCallback(() => setShow(false), [setShow])\n  return (\n    <Tooltip {...rest} show={show}>\n      <div onMouseEnter={open} onMouseLeave={close}>\n        {children}\n      </div>\n    </Tooltip>\n  )\n}\n","import React, { useCallback, useState } from 'react'\nimport { HelpCircle as Question } from 'react-feather'\nimport styled from 'styled-components'\nimport Tooltip from '../Tooltip'\n\nconst QuestionWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0.2rem;\n  border: none;\n  background: none;\n  outline: none;\n  cursor: default;\n  border-radius: 36px;\n  background-color: ${({ theme }) => theme.colors.invertedContrast};\n  color: ${({ theme }) => theme.colors.textSubtle};\n\n  :hover,\n  :focus {\n    opacity: 0.7;\n  }\n`\n\nexport default function QuestionHelper({ text }: { text: string }) {\n  const [show, setShow] = useState<boolean>(false)\n\n  const open = useCallback(() => setShow(true), [setShow])\n  const close = useCallback(() => setShow(false), [setShow])\n\n  return (\n    <span style={{ marginLeft: 4 }}>\n      <Tooltip text={text} show={show}>\n        <QuestionWrapper onClick={open} onMouseEnter={open} onMouseLeave={close}>\n          <Question size={16} />\n        </QuestionWrapper>\n      </Tooltip>\n    </span>\n  )\n}\n","\nimport React from 'react'\nimport styled from 'styled-components'\nimport Countdown from 'react-countdown'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\n// import { claimForest } from 'utils/callHelpers'\n// import { useForest } from 'hooks/useContract'\nimport useTokenBalance from 'hooks/useTokenBalance'\n// import  IsMute  from 'hooks/useSound'\nimport { getCakeAddress, getForestAddress } from 'utils/addressHelpers'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport CardValue from 'views/Home/components/CardValue'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n// import useRefresh from 'hooks/useRefresh'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport UnlockButton from 'components/UnlockButton'\nimport QuestionHelper from 'components/QuestionHelper'\n// import useSound from 'use-sound'\n\n\nconst StyledCard = styled(Card)`\n  min-height: 365px;\n  background-image: url(/images/games/hackthevaults.png);\n  background-position: center right;\n  background-repeat: repeat;\n  \n  background-size: cover;\n`\n\n\nconst PapaFrame = styled(Card)`\n  min-height: 365px;\n  padding:15px;\n  border: 20px solid transparent;\n  box-shadow:none;\n  border-image: url(/images/games/frame.svg) 8% round;\n  border-image-width:auto;\n  // transform: matrix(-1, 0, 0, 1, 0, 0);\n  // background-image: url(/images/games/frame.svg);\n  // background-position: center right;\n  // background-repeat: repeat;\n  // border: 10px solid transparent;\n\n  // background-size: cover;\n`\n\nconst Adventure = styled.div`\n    font-family: 'Adventure';\n    background:#F3BA2F;\n    // background: -webkit-linear-gradient(#c91919, #f5ff00);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n`\n\nconst QuesionHelperPositioner = styled.div`\n  margin-top: 10px;\n  margin-right: 10px;\n  float: right;\n`\n\ninterface TillCollapseCardProps {\n  hasWinner,\n  nextStartTime,\n  lastBidTime,\n  endOfAuction,\n}\n\nconst TillCollapseCard: React.FC<TillCollapseCardProps> = ({ hasWinner, nextStartTime, lastBidTime, endOfAuction }) => {\n  // const forestContract = useForest()\n\n  // getForestAddress(), getRpcUrl()\n  const balance = useTokenBalance(getCakeAddress())\n  const seedPriceInUsd = usePriceCakeBusd()\n  // const mute = IsMute()\n  const balanceInUsd = balance.multipliedBy(seedPriceInUsd)\n  // const [play,{isPlaying,stop}] = useSound('/sounds/game.mp3',{soundEnabled : mute })\n  // const [isClaiming, setIsClaiming] = useState(false)\n  const { account } = useWallet()\n  // const onClaim = async () => {\n  //   setIsClaiming(true)\n  //   try {\n  //     await claimForest(forestContract, account)  \n  //   } catch (e) {\n  //     console.error(e)\n  //   }\n  //   setIsClaiming(false)\n  // }\n\n  // Check if is time to start a new game\n  const isWaitingForNextGame = nextStartTime * 1000 > Date.now()\n\n  // const isEnding = endData && endData.lastBidTime !== 0\n  const isRunning = lastBidTime !== 0\n\n  // play sound when next Round is within 30 sec\n  // if(nextStartTime * 1000 - Date.now() < 30000 && !isPlaying) {\n  //   play()\n  // } else if(nextStartTime * 1000 - Date.now() < 0 && isPlaying) {\n  //   stop()\n  // }\n  \n  // DEBUG DATA\n  // const obj = { isWaitingForNextGame, isRunning, hasWinner, nextStartTime, lastBidTime, endOfAuction }\n  // console.log('DEBUG FOREST DATA =>', obj)\n\n  return (\n    <PapaFrame >\n       <StyledCard>\n      <QuesionHelperPositioner>\n        <QuestionHelper text=\"This is the main header of the game, showcasing the current status of the game along with the countdown.\" />\n      </QuesionHelperPositioner>\n      <CardBody>\n        {isWaitingForNextGame ? (\n          <Text fontSize=\"60px\" mb=\"10px\" color=\"white\">\n            <Adventure>Next Round</Adventure>\n            <Countdown date={nextStartTime * 1000}/>\n            <br/>\n            <Text fontSize=\"30px\" color=\"white\">Prepare for battle!</Text>\n          </Text>\n        ) : (\n          <>\n            {/* <Heading size=\"xl\" mb=\"10px\" color=\"white\">\n              Round status\n            </Heading> */}\n            {isRunning ? (\n              <div>\n              <Text fontSize=\"60px\" mb=\"10px\" color=\"white\">\n                {hasWinner ? <Adventure>Waiting for claim</Adventure> : <Countdown key={endOfAuction} date={endOfAuction}/>}\n              </Text>\n              </div>\n            ) : (\n              <div>\n              \n              <Text  fontSize=\"60px\" mb=\"10px\" color=\"white\">\n                <Adventure>Lets the Hack Begins</Adventure>\n              </Text>\n              </div>\n            )}\n            <Heading size=\"xl\" mb=\"10px\" color=\"white\">\n              Pot\n              <CardValue value={parseFloat(getFullDisplayBalance(balance))} decimals={2}  />\n              <CardValue\n                value={parseFloat(getFullDisplayBalance(balanceInUsd))}\n                prefix=\"~$\"\n                decimals={2}\n                fontSize=\"24px\"\n                // color=\"white\"\n              />\n            </Heading>\n          </>\n        )}\n        <Text marginTop=\"20px\">\n          {!account && <UnlockButton mr=\"10px\" mt=\"20px\" />}\n          {/* hasWinner && account && (\n            <Button ml=\"10px\" onClick={onClaim} disabled={isClaiming} mt=\"20px\">\n              Restart Game\n            </Button>\n          ) */}\n        </Text>\n      </CardBody>\n    </StyledCard>\n \n    </PapaFrame>\n )\n}\n\nexport default TillCollapseCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport useSound from 'use-sound'\n\nconst StyledDiv = styled.div`\n  position: relative;\n  color: white;\n  font-size: 26px;\n  border-radius: 4px;\n  width: 100%;\n  height: 70px;\n  background: url('images/forest/king_button.gif');\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n  cursor: pointer;\n`\n\nconst StyledSpan = styled.span`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`\n\nconst WoodButton = ({ onBid, disabled, text }) => {\n  const currentText = disabled ? 'Waiting...' : text\n  const [play] = useSound('/sounds/click.mp3')\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  const onClick = disabled ? () => {} : onBid\n  return (\n    <StyledDiv\n      onClick={() => {\n        play()\n        onClick()\n      }}\n    >\n      <StyledSpan>{currentText}</StyledSpan>\n    </StyledDiv>\n  )\n}\n\nexport default WoodButton\n","import React, { useState, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Button, Card, CardBody, Flex, Heading, Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useForest } from 'hooks/useContract'\nimport { getFullDisplayBalance, getBalanceNumber } from 'utils/formatBalance'\nimport BigNumber from 'bignumber.js'\nimport { useForestApprove } from 'hooks/useApprove'\nimport { useForestAllowance } from 'hooks/useAllowance'\nimport UnlockButton from 'components/UnlockButton'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { participateForest } from 'utils/callHelpers'\nimport QuestionHelper from 'components/QuestionHelper'\nimport WoodButton from './WoodButton'\n\nconst StyledTokenViewer = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledCard = styled(Card)``\ninterface ParticipateCardProps {\n  hasWinner\n  nextStartTime\n  bidAmount\n}\n\n\nconst PapaFrame = styled(Card)`\n  // min-height: 365px;\n  padding:15px;\n  border: 20px solid transparent;\n  box-shadow:none;\n  border-image-repeat: revert;\n  border-image: url(/images/games/frame.svg) 8% round;\n  border-image-width:auto;\n  // transform: matrix(-1, 0, 0, 1, 0, 0);\n  // background-image: url(/images/games/frame.svg);\n  // background-position: center right;\n  // background-repeat: repeat;\n  // border: 10px solid transparent;\n\n  // background-size: cover;\n`\n\nconst QuesionHelperPositioner = styled.div`\n  margin-top: 10px;\n  margin-right: 10px;\n  float: right;\n`\n\nconst ParticipateCard: React.FC<ParticipateCardProps> = ({ hasWinner, nextStartTime, bidAmount }) => {\n  const forestContract = useForest()\n  const max = useTokenBalance(getCakeAddress())\n  const allowance = useForestAllowance()\n  const { onApprove } = useForestApprove()\n  const { account } = useWallet()\n  const [pendingTx, setPendingTx] = useState(false)\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  // const forestBalance = useMemo(() => parseFloat(getFullDisplayBalance(balance)), [balance])\n  // const bid = (forestBalance * 0.012).toFixed(10)\n\n  const bid = getBalanceNumber(new BigNumber(bidAmount)).toFixed(10)\n\n  const onSubmit = async () => {\n    try {\n      setPendingTx(true)\n      await participateForest(forestContract, bid, account)\n      setPendingTx(false)\n    } catch (e) {\n      console.error(e)\n      setPendingTx(false)\n    }\n  }\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setPendingTx(true)\n      await onApprove()\n      setPendingTx(false)\n    } catch (e) {\n      console.error(e)\n      setPendingTx(false)\n    }\n  }, [onApprove])\n\n  const isWaitingForNextGame = nextStartTime * 1000 > Date.now()\n\n  return (\n    <PapaFrame>\n      <QuesionHelperPositioner>\n        <QuestionHelper text=\"This is the bidding card, where you can enter your PRV to partecipate in the current match. Remember to prepare your bid before hand, taking into account about 10 seconds of BSC lag.\" />\n      </QuesionHelperPositioner>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          Bid Now!\n        </Heading>\n\n        {!account ? (\n          <UnlockButton />\n        ) : (\n          <>\n            <StyledTokenViewer>\n              <Text color=\"primary\" fontSize=\"24px\">\n                {parseFloat(bid).toFixed(1)} PRV\n              </Text>\n              <Text color=\"primary\" bold fontSize=\"16px\">\n                Your balance {parseFloat(fullBalance).toFixed(2)} PRV\n              </Text>\n            </StyledTokenViewer>\n            <Flex mt=\"20px\">\n              {!allowance.toNumber() ? (\n                <Button onClick={handleApprove} variant=\"secondary\" fullWidth disabled={pendingTx}>\n                  Approve contract\n                </Button>\n                ):<WoodButton onBid={onSubmit} disabled={!hasWinner?pendingTx || isWaitingForNextGame:true} text={!hasWinner?\"Bid Now\":\"Waiting for Claim\"}/> \n              // !hasWinner ? (\n              //   /* {\n              //   <div>\n              //     <Button onClick={onSubmit} fullWidth disabled={pendingTx || isWaitingForNextGame}>\n              //       Bid Now\n              //     </Button>\n              //     <BidNow />\n              //   </div>} */\n              //   <WoodButton onBid={onSubmit} disabled={pendingTx || isWaitingForNextGame} text=\"Bid Now\"/>\n              // ) : (\n              //   <WoodButton onBid={onSubmit} disabled text=\"Waiting for Claim\"/>\n              // )\n              }\n            </Flex>\n          </>\n        )}\n      </CardBody>\n    </PapaFrame>\n  )\n}\n\nexport default ParticipateCard\n\n  /* <Button onClick={onSubmit} disabled>\nWaiting for Claim\n</Button> */","import { useCallback, useState } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\n// it is called 2 times every fastRefresh (one for bid and one for win events)\nconst getPastEventsByBlocksStep = async (\n  contract: any,\n  eventName: string,\n  // fromBlock = '0',\n  filter: any = {},\n  step = 5000,\n) => {\n  const web3 = getWeb3()\n\n  \n\n  const lastBlockNumber: number = await web3.eth.getBlockNumber()\n\n  // Just ignore fromBlock parameter which is hardcoded and casues issues on metamask when the number of calls increases\n  // let currentBlock = parseInt(fromBlock)\n  // go back to 5000 blocks instead (approx 5 minutes history) and collect that data\n  // with a step of 5000 it means that we have only 1 chunk\n  let currentBlock = lastBlockNumber - 5000\n\n  const diff = lastBlockNumber - currentBlock\n  if (diff <= 0) return []\n\n  const chunks = []\n\n  while (currentBlock < lastBlockNumber) {\n    chunks.push([currentBlock, Math.min(currentBlock + step, lastBlockNumber)])\n\n    currentBlock += step\n  }\n\n  // console.log('chunks', chunks)\n  const events: any[] = await Promise.all(\n    chunks.map((chunk) => {\n      // console.log('call', chunk[0], chunk[1])\n      return contract.getPastEvents(eventName, {\n        filter,\n        fromBlock: chunk[0],\n        toBlock: chunk[1],\n      })\n    }),\n  ).then((chunksData) => {\n    let data = []\n    chunksData.forEach((chunk) => {\n      // console.log('single chung data', chunk)\n      data = data.concat(chunk)\n    })\n    return data\n  })\n\n  return events\n}\n\nconst usePastEvents = (contract, eventName: string, filter: any = undefined) => {\n  const [loading, setLoading] = useState(false)\n  const fetchEvents = useCallback(async () => {\n    setLoading(true)\n    let data = []\n    try {\n      data = await getPastEventsByBlocksStep(contract, eventName, '6953142', filter)\n    } catch (e) {\n      console.error(e)\n    }\n    setLoading(false)\n    return data\n  }, [contract, eventName, filter])\n\n  return {\n    loading,\n    fetch: fetchEvents,\n  }\n}\n\nexport default usePastEvents\n","\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { useForest } from 'hooks/useContract'\nimport useRefresh from 'hooks/useRefresh'\nimport usePastEvents from 'hooks/usePastEvents'\nimport styled from 'styled-components'\n\nimport { Card, CardBody, Flex, Heading, Link, Text } from '@pancakeswap-libs/uikit'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport BigNumber from 'bignumber.js'\nimport CardValue from 'views/Home/components/CardValue'\nimport QuestionHelper from 'components/QuestionHelper'\n\nconst StyledCard = styled(Card)``\n\nconst QuesionHelperPositioner = styled.div`\n  margin-top: 10px;\n  margin-right: 10px;\n  float: right;\n`\n\nconst Events = styled.div`\n  max-height: 300px;\n  overflow-y: auto;\n`\n\nconst formatWins = (wins) => {\n  return wins.map((win) => {\n    return {\n      ...win,\n      type: 'WIN',\n      author: win.returnValues.author,\n      amount: win.returnValues.amount,\n    }\n  })\n}\n\nconst formatBids = (bids) => {\n  return bids.map((bid) => {\n    return {\n      ...bid,\n      type: 'BID',\n      author: bid.returnValues.author,\n      amount: bid.returnValues.amount,\n    }\n  })\n}\n\n// const formatCollapses = (collapses) => {\n//   return collapses.map((collapse) => {\n//     return {\n//       ...collapse,\n//       type: 'COLLAPSE',\n//       author: '0x000000000000000000000000000000000000dEaD',\n//       amount: collapse.returnValues.amount,\n//     }\n//   })\n// }\n\nconst useLastEvents = () => {\n  const forestContract = useForest()\n  const [data, setData] = useState([])\n  const { fastRefresh } = useRefresh()\n  const { loading: loadingWins, fetch: fetchWins } = usePastEvents(forestContract, 'OnWin')\n  const { loading: loadingBids, fetch: fetchBids } = usePastEvents(forestContract, 'OnBid')\n\n  // Taking the last 40 events between wins and bids\n  const fetchEvents = useCallback(async () => {\n    const lastEvents = await Promise.all([fetchWins(), fetchBids()])\n      .then(([wins, bids]) => {\n        const events = [...formatWins(wins), ...formatBids(bids)].sort((a, b) => b.blockNumber - a.blockNumber)\n        return events.slice(0, 40)\n      })\n      .catch((e) => {\n\n        console.info(e)\n        return []\n      })\n\n    setData(lastEvents)\n  }, [fetchWins, fetchBids])\n\n  const loading = loadingWins || loadingBids\n  useEffect(() => {\n    fetchEvents()\n  }, [fastRefresh, fetchEvents])\n  \n  return {\n    loading,\n    data,\n  }\n\n}\n\nconst PapaFrame = styled(Card)`\n  // min-height: 365px;\n  padding:15px;\n  border: 20px solid transparent;\n  box-shadow:none;\n  border-image-repeat: revert;\n  border-image: url(/images/games/frame.svg) 8% round;\n  border-image-width:auto;\n  // transform: matrix(-1, 0, 0, 1, 0, 0);\n  // background-image: url(/images/games/frame.svg);\n  // background-position: center right;\n  // background-repeat: repeat;\n  // border: 10px solid transparent;\n\n  // background-size: cover;\n`\n\nconst LastEventsCard = () => {\n  const { data } = useLastEvents()\n  return (\n    <PapaFrame>\n      <QuesionHelperPositioner>\n        <QuestionHelper text=\"This card showcases all of the previous bid and winners of king of the forest.\" />\n      </QuesionHelperPositioner>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          Previous events\n        </Heading>\n        {data.length ? <Events>\n          {data.map((event) => {\n            return (\n              <Flex key={event.transactionHash} alignItems=\"center\" justifyContent=\"space-between\" mb=\"10px\">\n                <Flex alignItems=\"center\">\n                  <Link marginRight=\"20px\" href={`https://bscscan.com/tx/${event.transactionHash}`} external>\n                    Tx: {event.transactionHash.slice(0, 5)}...{event.transactionHash.slice(-5)}\n                  </Link>\n                  <Text>{event.type}</Text>\n                </Flex>\n                <CardValue\n                  value={parseFloat(getFullDisplayBalance(new BigNumber(event.amount)))}\n                  // postFix=\"SEED\"\n                  decimals={4}\n                  fontSize=\"16px\"\n                  // paddingRight=\"10px\"\n                />\n              </Flex>\n            )\n          })}\n        </Events> : 'There\\'s no recent events'}\n        \n      </CardBody>\n    </PapaFrame>\n  )\n}\n\nexport default LastEventsCard\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport { useForest } from 'hooks/useContract'\nimport { claimForest } from 'utils/callHelpers'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport QuestionHelper from 'components/QuestionHelper'\n\nconst StyledCard = styled(Card)`\n  background-image: url(/images/forest/last_king2.gif);\n  background-position: bottom;\n  background-repeat: no-repeat;\n  background-size: cover;\n`\n\nconst QuesionHelperPositioner = styled.div`\n  margin-top: 10px;\n  margin-right: 10px;\n  float: right;\n`\n\n\n\nconst PapaFrame = styled(Card)`\n  // min-height: 365px;\n  padding:15px;\n  border: 20px solid transparent;\n  box-shadow:none;\n  background-image:url(/images/games/hackthevaults.png);\n  background-size: contain;\n  border-image: url(/images/games/frame.svg) 8% round;\n  border-image-width:auto;\n  // transform: matrix(-1, 0, 0, 1, 0, 0);\n  // background-image: url(/images/games/frame.svg);\n  // background-position: center right;\n  // background-repeat: repeat;\n  // border: 10px solid transparent;\n\n  // background-size: cover;\n`\n\nconst ActualKing = ({ lastBidder, hasWinner }) => {\n  const { account } = useWallet()\n  const forestContract = useForest()\n  const [isClaiming, setIsClaiming] = useState(false)\n  const onClaim = async () => {\n    setIsClaiming(true)\n    try {\n      await claimForest(forestContract, account)\n    } catch (e) {\n      console.error(e)\n    }\n    setIsClaiming(false)\n  }\n\n  return (\n    <PapaFrame>\n      <QuesionHelperPositioner>\n        <QuestionHelper text=\"This section showcases the last bidder in the current match along with the winner of the game. It also allow users to restart the game.\" />\n      </QuesionHelperPositioner>\n      <CardBody>\n        <Heading size=\"xl\" mt=\"10px\" mb=\"40px\" color=\"white\">\n          Current Hacker\n        </Heading>\n        {lastBidder && (\n          <Text ml=\"30px\" color=\"white\" fontSize=\"24px\">\n            Last bidder: {lastBidder.slice(0, 8)}...{lastBidder.slice(-8)}\n          </Text>\n        )}\n        <Text marginTop=\"20px\">\n          {hasWinner && account && (\n            <Button onClick={onClaim} disabled={isClaiming} mt=\"20px\" fullWidth>\n              Restart Game\n            </Button>\n          )}\n        </Text>\n      </CardBody>\n    </PapaFrame>\n  )\n}\n\nexport default ActualKing\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { BaseLayout, Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport Page from 'components/layout/Page'\n\nimport { useForest } from 'hooks/useContract'\nimport useRefresh from 'hooks/useRefresh'\nimport { getAllForestData } from '../../utils/forestUtils';\n// import { useMatchBreakpoints } from '../../../../treedefi-uikit/src/hooks';\n// import QuestionHelper from 'components/QuestionHelper'\nimport Hero from './components/Hero'\nimport TillCollapseCard from './components/TillCollapseCard'\nimport ParticipateCard from './components/ParticipateCard'\nimport LastEventsCard from './components/LastEventsCard'\nimport ActualKing from './components/ActualKing'\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 20px;\n  margin-top: 20px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\nconst BottomCardBody = styled(CardBody)`\n  // background-image: url(/images/forest/twines.png);\n  background-position: top center;\n  background-repeat: no-repeat;\n  background-size: 100%;\n`\n\n\nconst GridItem = styled.div<{ marginBottom?: string }>`\n  margin-bottom: ${(props) => (props.marginBottom ? props.marginBottom : '10px')};\n`\nconst Grid = styled.div<{ pastDraw?: boolean }>`\n  display: grid;\n  grid-template-columns: repeat(${(props) => (props.pastDraw ? 3 : 2)}, 1fr);\n  grid-template-rows: repeat(4, auto);\n`\n// const QuesionHelperPositioner = styled.div`\n//   margin-top: 10px;\n//   margin-right: 10px;\n//   float: right;\n// `\n\nconst Forest = () => {\n  const forestContract = useForest()\n  const [forestData, setForestData] = useState(null)\n  const { ultraRefresh } = useRefresh()\n  // const { isXl } = useMatchBreakpoints();\n  // const isMobile = isXl === false;\n  // const marginForText = isMobile ? '40px' : '90px'\n  const marginLeft = '10%'\n\n  useEffect(() => {\n    const allForestData = async () => {\n      const data = await getAllForestData(forestContract)\n      setForestData(data)\n    }\n    allForestData()\n  }, [forestContract, ultraRefresh])\n\n  return (\n    <>\n      <Hero />\n      <Page>\n        <TillCollapseCard\n          hasWinner={forestData?.hasWinner}\n          nextStartTime={forestData?.nextStartTime}\n          lastBidTime={forestData?.lastBidTime}\n          endOfAuction={forestData?.endOfAuction}\n        />\n        <Cards>\n          <div>\n            <ParticipateCard\n              hasWinner={forestData?.hasWinner}\n              nextStartTime={forestData?.nextStartTime}\n              bidAmount={forestData?.bidAmount}\n            />\n          </div>\n          <ActualKing lastBidder={forestData?.lastBidder} hasWinner={forestData?.hasWinner} />\n        </Cards>\n        <Card>\n          <LastEventsCard />\n        </Card>\n\n\n\n\n        <Card mt=\"24px\" style={{background:\"transparent\",\n        boxShadow:\"none\",marginTop:20}}>\n          <Grid>\n            <GridItem style={{textAlign: \"center\",\n    alignItems: \"center\",\n    alignSelf:\"center\",\n    // boxShadow: \"0px 0px 50px 13px rgb(243 186 47 / 50%)\"\n}}>\n            <Heading size=\"xl\" mb=\"24px\" color=\"#fff\">\n            Hack The Vaults       \n             </Heading>\n\n        <Heading size=\"xl\" mb=\"24px\" color=\"#fff\">\n        Game Rules       \n         </Heading>\n            </GridItem>\n            <GridItem>\n            {/* <Text ml={marginLeft} bold>\n              How to Play?\n            </Text> */}\n            <Heading size=\"xl\" mb=\"24px\" color=\"#fff\" style={{marginLeft}}>\n            How to Play?     \n             </Heading>\n            <Text ml={marginLeft} mb=\"20px\">\n              King of the Forest has a 90 second countdown timer which resets on each bid.\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              Bid is in SEED and it goes into the Forest pool balance, allowing you to become the current king.\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              When the timer reaches zero, the current king wins the game.\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              Before another game can start one of the users has to press the restart game button.  <br />\n              This resets the contract and refreshes the cooldown timer before a new game begins.\n            </Text>\n            <Text ml={marginLeft} bold>\n              Winning’s distribution?\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              When the countdown timer ends, Forest pool balance will be distributed as follows: <br />\n              60% credited instantly to winner’s address (last bidder). <br />\n              20% carries over to the next round. <br />\n              15% is burned automatically. <br />\n              5% goes to marketing treasury. (We are also thinking of donating a portion for this.)\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              Note: Anyone can click on the claim button but the winning share will go to the last bidder.\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\" color=\"red\" bold>\n              Important Note: All bids are final. Your SEED cannot be returned after bidding.\n            </Text>\n         \n            </GridItem>\n            </Grid>\n       \n       \n\n            <Grid>\n\n\n            <GridItem>\n            \n\n            <h3>\n            When the countdown timer ends, Forest pool balance will be distributed as follows:\n            </h3>\n            \n            <ul style={{color:\"#fff\"}}>\n              <li>60% credited instantly to winner’s address (last bidder).</li>\n              <li>20% carries over to the next round.</li>\n\n              <li>15% is burned automatically.</li>\n\n<li>\n5% goes to marketing treasury. (We are also thinking of donating a portion for this.)\n</li>\n            </ul>\n\n\n\n<h3 style={{marginTop:20,color:\"#fff\"}}>Note: Anyone can click on the claim button but the winning share will go to the last bidder.</h3>\n\n<h3 style={{marginTop:20,color:\"red\"}}>\nImportant Note: \nAll bids are final. Your SEED cannot be returned after bidding.\n</h3>\n\n\n            {/* <Heading size=\"xl\" mb=\"24px\" color=\"#fff\" style={{marginLeft}}>\n            Winning Distribution     \n             </Heading>\n            <Text ml={marginLeft} mb=\"20px\">\n              King of the Forest has a 90 second countdown timer which resets on each bid.\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              Bid is in SEED and it goes into the Forest pool balance, allowing you to become the current king.\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              When the timer reaches zero, the current king wins the game.\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              Before another game can start one of the users has to press the restart game button.  <br />\n              This resets the contract and refreshes the cooldown timer before a new game begins.\n            </Text>\n            <Text ml={marginLeft} bold>\n              Winning’s distribution?\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              When the countdown timer ends, Forest pool balance will be distributed as follows: <br />\n              60% credited instantly to winner’s address (last bidder). <br />\n              20% carries over to the next round. <br />\n              15% is burned automatically. <br />\n              5% goes to marketing treasury. (We are also thinking of donating a portion for this.)\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              Note: Anyone can click on the claim button but the winning share will go to the last bidder.\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\" color=\"red\" bold>\n              Important Note: All bids are final. Your SEED cannot be returned after bidding.\n            </Text>\n          */}\n            </GridItem>\n           \n           \n\n\n\n            <GridItem style={{textAlign: \"center\",\n    alignItems: \"center\",\n    alignSelf:\"center\"\n}}>\n            <Heading size=\"xl\" mb=\"24px\" color=\"#fff\">\n            Winning Distribution      \n             </Heading>\n\n        <Heading size=\"xl\" mb=\"24px\" color=\"#fff\">\n        Game Rules       \n         </Heading>\n            </GridItem>\n           \n           \n           \n            </Grid>\n       \n       \n        </Card>\n     \n     \n     \n     \n     \n      </Page>\n    </>\n  )\n}\n\nexport default Forest\n"],"sourceRoot":""}