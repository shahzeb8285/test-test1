{"version":3,"sources":["components/layout/Flex.tsx","views/Treegame/Components/Hero.tsx","views/Treegame/Components/GreenWheel.tsx","views/Treegame/Treegame.tsx"],"names":["FlexLayout","styled","div","Title","Heading","attrs","as","size","theme","colors","secondary","Blurb","Text","StyledHero","StyledContainer","Container","mediaQueries","sm","LeftWrapper","lg","Hero","TranslateString","useI18n","style","color","Footer","MoneyWheel","displayBalance","useTokenBalance","getCakeAddress","dividedBy","BigNumber","pow","toFixed","paddingLeft","paddingRight","contract","useMoneyWheel","token","useCake","tokenBalance","toString","soundUrl","Flex","marginTop","verticalAlign","margin","position","top","transform","textShadow","fontSize","display","mb","listStyle","bold","Card","img","textSubtle","Treegame","useRouteMatch","url","cakeBalance","useState","forestData","useWallet","account","usePriceCakeBusd","toNumber","useModal","max","tokenName","nextStartTime","Date","now","data","useRefresh","fastRefresh","winnigIds","find","item","type","useLastEvents"],"mappings":"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","file":"static/js/19.55b4ba0f.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 350px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text } from '@pancakeswap-libs/uikit'\n// import { useGetMaxBet } from 'hooks/useMaxBet'\n// import { useMoneyWheel } from 'hooks/useContract'\nimport useI18n from 'hooks/useI18n'\nimport Container from 'components/layout/Container'\n// import nftrees from '../../../../assets/img/Fingers.png'\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.secondary};\n  margin-bottom: 24px;\n`\n\nconst Blurb = styled(Text)`\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n`\n\nconst StyledHero = styled.div`\n  // background: linear-gradient(rgb(142 199 97) 0%, rgb(59 183 143) 76.22%);\n  padding-bottom: 40px;\n  padding-top: 40px;\n  text-align:center;\n  margin-bottom: 2em;\n  width:100%;\n`\n\nconst StyledContainer = styled(Container)`\n  display: flex;\n  width:100%;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`\n\nconst LeftWrapper = styled.div`\n  flex: 1;\n  padding-right: 0;\n  width:100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-right: 32px;\n  }\n`\n\nconst RightWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n  padding-left: 0;\n  margin-top: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0;\n    padding-left: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-left: 32px;\n  }\n`\n\nconst Hero = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledHero>\n      <StyledContainer>\n        <LeftWrapper>\n          <Title style={{ color: 'white' }}>{TranslateString(999, 'The GOLDEN Wheel')}</Title>\n          <Blurb>{TranslateString(999, 'Spin The Wheel Using Your SEED! SEEDS To Be Won In The Jackpot')}</Blurb>\n          {/* <Blurb>\n            {useGetMaxBet(useMoneyWheel()).dividedBy(1000000000000000000).multipliedBy(50).toFixed(0)}{' '}\n            {TranslateString(999, 'SEEDS to be won in the jackpot!')}\n          </Blurb> */}\n        </LeftWrapper>\n        {/* <RightWrapper> */}\n          {/* <img src={nftrees} alt=\"greenwheel\" style={{ width: '40%', marginTop: '-20px', display: 'block' }} /> */}\n        {/* </RightWrapper> */}\n      </StyledContainer>\n    </StyledHero>\n  )\n}\n\nexport default Hero\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit' // BaseLayout\nimport Container from 'components/layout/Container'\nimport BigNumber from 'bignumber.js'\nimport FlexLayout from 'components/layout/Flex'\nimport MoneyWheelBsc from 'moneywheel-bsc'\n// import { useGetMaxBet } from 'hooks/useMaxBet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { useMoneyWheel, useCake } from 'hooks/useContract'\nimport Hero from './Hero'\n\nconst wheelsound = 'https://cdn.treedefi.com/files/wheel.mp3'\n\nconst Footer = styled.div`\n  background-image: url(/images/footerbg.svg);\n  background-position: bottom;\n  background-repeat-x: repeat;\n  background-repeat-y: no-repeat;\n  padding-bottom: 17%;\n  background-size: 50%;\n`\n\nconst MoneyWheel: React.FC = () => {\n  const tokenBalance = useTokenBalance(getCakeAddress())\n  const displayBalance = tokenBalance.dividedBy(new BigNumber(10).pow(18)).toFixed(2)\n\n  return (\n    <>\n      <Hero />\n      <div style={{ paddingLeft: '20px', paddingRight: '20px' }}>\n        <MoneyWheelBsc\n          contract={useMoneyWheel()}\n          token={useCake()}\n          tokenBalance={displayBalance.toString()}\n          soundUrl={wheelsound}\n        />\n      </div>\n      <Container>\n        {/* <Heading mb=\"24px\" size=\"xl\">\n              The Golden Wheel Rules:\n            </Heading> */}\n\n        <FlexLayout style={{marginTop:\"50px\"}}>\n          <div  >\n            <Heading style={{ verticalAlign: \"middle\", margin: \"0\", position: \"relative\", top: \"50%\", transform: \"translateY(-50%)\", textShadow:\"10px\" }} size=\"xl\">\n              The <Text fontSize=\"xl\" style={{ color: \"white\", display: \"inline\" }}>Golden</Text> Wheel Rules\n            </Heading>\n          </div>\n          <div >\n            <CardBody>\n              <Text fontSize=\"xl\" style={{fontSize:\"2rem\"}}>How to Play?</Text>\n              <Text mb=\"20px\">\n                <ul style={{ listStyle: \"disc\" }}>\n                  <li style={{ color: \"white\" }}>\n                    Bid on the number where you think the wheel will stop after the spin.\n                  </li>\n                  <li style={{ color: \"white\" }}>\n                    The multipliers are 1X, 3X, 5X, 10X, 20X, 50X!\n                  </li>\n                  <li style={{ color: \"white\" }}>\n                    Winners receive the multiplier reward + the initial bet they made.\n                  </li>\n                  <li style={{ color: \"white\" }}>\n                    You can split the bet on different numbers to step up your strategy!\n                  </li>\n                  <li style={{ color: \"white\" }}>\n                    The max allowed bet is dynamically calculated to ensure that your eventual win can be fulfilled by us.\n                  </li>\n                  <li style={{ color: \"white\" }}>\n                    10% of each lost bet will be burned, 90% will be added to the pot.\n                  </li>\n\n                </ul>\n                {/* Bid on the number where you think the wheel will stop after the spin.\n                <br />\n                The multipliers are 1X, 3X, 5X, 10X, 20X, 50X!\n                <br />\n                Winners receive the multiplier reward + the initial bet they made.\n                <br />\n                You can split the bet on different numbers to step up your strategy!\n                <br />\n                The max allowed bet is dynamically calculated to ensure that your eventual win can be fulfilled by us.\n                <br />\n                10% of each lost bet will be burned, 90% will be added to the pot. */}\n              </Text>\n              <Text mb=\"20px\" color=\"red\" bold>\n                Important Note: All bids are final. Your SEED cannot be returned after bidding.\n              </Text>\n            </CardBody>\n          </div>\n        </FlexLayout>\n      </Container>\n      <Footer />\n    </>\n  )\n}\n\nexport default MoneyWheel\n","\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useState, useCallback, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, useModal, Text } from '@pancakeswap-libs/uikit'\nimport { useRouteMatch, Link } from 'react-router-dom'\n// getForestAddress\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport useRefresh from 'hooks/useRefresh'\n// import { getAllForestData } from 'utils/forestUtils'\n// import { useForest } from 'hooks/useContract'\nimport Countdown from 'react-countdown'\nimport useTokenBalance from 'hooks/useTokenBalance'\n// import usePastEvents from 'hooks/usePastEvents'\nimport BuyModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\nimport getRpcUrl from 'utils/getRpcUrl'\n// import { claimForest, participateForest } from 'utils/callHelpers'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport CardValue from '../Farms'\nimport { usePriceCakeBusd } from '../../state/hooks';\nimport MoneyWheel from './Components/GreenWheel'\n\n\nconst StyledKingOfForestCard = styled(Card)`\n  background-image: true ? url('/images/ticket-bg.svg') : '';\n  background-repeat: no-repeat;\n  background-position: top right;\n  background-size: 50%;\n  min-height: 376px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n  position: absolute;\n  right: 20px;\n  top: 55px;\n  height: 400px;\n  width: 150px;\n  z-index: 1;\n  @media (max-width: 480px) {\n    height: 400px;\n    width: 100px;\n  }\n`\n\n\nconst KingImage = styled.img`\n  margin-bottom: 16px;\n  position: absolute;\n  right: -10px;\n  bottom: 10px;\n  height: 200px;\n  width: 200px;\n  z-index: 1;\n  @media (max-width: 480px) {\n    height: 150px;\n    width: 150px;\n    right: 0px;\n    bottom: 22px;\n  }\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  display: flex;\n  margin-top: 24px;\n  button {\n    flex: 1 0 50%;\n  }\n`\n\n\n// const ActionsClaim = styled.div`\n//   display: flex;\n//   margin-top: 24px;\n//   button {\n//     flex: 1 0 50%;\n//   }\n// `\n\nconst formatWins = (wins) => {\n  return wins.map((win) => {\n    return {\n      ...win,\n      type: 'WIN',\n      author: win.returnValues.author,\n      amount: win.returnValues.amount,\n    }\n  })\n}\n\nconst formatBids = (bids) => {\n  return bids.map((bid) => {\n    return {\n      ...bid,\n      type: 'BID',\n      author: bid.returnValues.author,\n      amount: bid.returnValues.amount,\n    }\n  })\n}\n\nconst useLastEvents = () => {\n//   const forestContract = useForest()\n  const [data, setData] = useState([])\n  const { fastRefresh } = useRefresh()\n//   const { fetch: fetchWins } = usePastEvents(forestContract, 'OnWin')\n//   const { fetch: fetchBids } = usePastEvents(forestContract, 'OnBid')\n\n  // Taking the last 40 events between wins and bids\n//   const fetchEvents = useCallback(async () => {\n//     const lastEvents = await Promise.all([fetchWins(), fetchBids()])\n//       .then(([wins, bids]) => {\n//         const events = [...formatWins(wins), ...formatBids(bids)].sort((a, b) => b.blockNumber - a.blockNumber)\n//         return events.slice(0, 40)\n//       })\n//       .catch((e) => {\n//         console.info(e)\n//         return []\n//       })\n\n//     setData(lastEvents)\n//   }, [fetchWins, fetchBids])\n\n//   useEffect(() => {\n//     fetchEvents()\n//   }, [fastRefresh, fetchEvents])\n\n  return {\n    winnigIds: data.find((item) => {\n      return item.type === 'WIN'\n    }),\n  }\n}\n\nconst Treegame = () => {\n  const { url } = useRouteMatch()\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n//   const forestContract = useForest()\n  const [forestData, setForestData] = useState(null)\n//   const { ultraRefresh } = useRefresh()\n//   const balance = useTokenBalance(getCakeAddress(), getForestAddress(), getRpcUrl())\n  const [pendingTx, setPendingTx] = useState(false)\n  const [isClaiming, setIsClaiming] = useState(false)\n  const { account } = useWallet()\n//   const kingpot = parseFloat(getFullDisplayBalance(balance))\n  const seedprice = usePriceCakeBusd().toNumber()\n\n//   useEffect(() => {\n//     const allForestData = async () => {\n//     //   const data = await getAllForestData(forestContract)\n//       setForestData(data)\n//     }\n//     allForestData()\n//   }, [forestContract, ultraRefresh])\n\n  const [onPresentBuy] = useModal(<BuyModal max={cakeBalance} tokenName=\"TREE\" />)\n  // Check if is time to start a new game\n  const isWaitingForNextGame = forestData?.nextStartTime * 1000 > Date.now()\n\n  // const isEnding = endData && endData.lastBidTime !== 0\n\n  // const isRunning = forestData?.lastBidTime !== 0\n//   const bid = getBalanceNumber(new BigNumber(forestData?.bidAmount)).toFixed(10)\n//   const enterBattle = async () => {\n//     try {\n//       setPendingTx(true)\n//       await participateForest(forestContract, bid, account)\n//       setPendingTx(false)\n//     } catch (e) {\n//       console.error(e)\n//       setPendingTx(false)\n//     }\n//   }\n\n//   const onClaim = async () => {\n//     setIsClaiming(true)\n//     try {\n//       await claimForest(forestContract, account)\n//     } catch (e) {\n//       console.error(e)\n//     }\n//     setIsClaiming(false)\n//   }\n\n  const { winnigIds } = useLastEvents()\n  return (\n    <MoneyWheel />\n  )\n}\n\nexport default Treegame"],"sourceRoot":""}