{"version":3,"sources":["utils/callHelpers.ts","components/UnlockButton.tsx","hooks/useApprove.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","hooks/useHarvest.ts","components/layout/Flex.tsx","components/Input/Input.tsx","config/index.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/components/FarmsHero.tsx","views/Farms/components/TokenHero.tsx","views/Farms/Farms.tsx"],"names":["approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","BigNumber","times","pow","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","participateForest","blackContract","participate","gasPrice","soushHarvest","soushHarvestBnb","claimForest","claimReward","UnlockButton","props","TranslateString","useI18n","useWallet","connect","reset","onPresentConnectModal","useWalletModal","onClick","color","useApprove","dispatch","useDispatch","useMasterchef","onApprove","useCallback","fetchFarmUserDataAsync","useLotteryApprove","cakeContract","useCake","lotteryContract","useLottery","useForestApprove","forestContract","useForest","StyledSpacer","styled","div","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","Wrapper","primary","ExpandableSectionButton","expanded","aria-label","role","bold","defaultProps","useHarvest","farmPid","onReward","txHash","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","FlexLayout","StyledInputWrapper","input","radii","default","StyledInput","Input","endAdornment","onChange","placeholder","startAdornment","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","liquidityUrlPathParts","justifyContent","href","external","NoFeeTag","variant","outline","startIcon","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","useStake","onStake","console","info","useUnstake","onUnstake","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","rawEarningsBalance","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","getContract","handleApprove","error","textTransform","fontSize","pr","mt","fullWidth","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","ethPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","ETH","v","Number","undefined","maximumFractionDigits","log","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","textSubtle","Title","Heading","attrs","Blurb","StyledHero","StyledContainer","Container","mediaQueries","sm","LeftWrapper","lg","RightWrapper","Hero","HeroProps","TokenHero","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","ethprice","usePriceEthBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","prvPerBlock","poolWeight","comparedTo","Page","FarmsHero","exact"],"mappings":"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","file":"static/js/11.85e1de3d.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const participateForest = async (blackContract, amount, account) => {\n  // console.log('amount', new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n  return blackContract.methods\n    .participate(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    // .participate(\"2\", 100)\n    .send({ from: account, gasPrice: '7000000000'  })\n    .on('transactionHash', (tx) => {\n      return tx\n    })\n}\n\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const claimForest = async (blackContract, account) => {\n  return blackContract.methods\n    .claimReward()\n    .send({ from: account})\n    .on('transactionHash', (tx) => {\n      return tx\n    })\n}\n","import React from 'react'\nimport { Button, useWalletModal, Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      <Text color=\"black\">{TranslateString(292, 'Unlock Wallet')}</Text>\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery, useForest } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\nexport const useForestApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const forestContract = useForest()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, forestContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, forestContract])\n\n  return { onApprove: handleApprove }\n}\n\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 350px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={\n          isTokenOnly ?\n            `https://exchange.pancakeswap.com/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n            :\n          `https://exchange.pancakeswap.com/#/add/${liquidityUrlPathParts}`\n        }>\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n  color:black;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"primary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"textSubtle\" />\n        </IconButton>\n        <IconButton variant=\"primary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"textSubtle\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {/* {pid === 12 ?\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size='sm'\n            variant='secondary'\n            marginBottom='15px'\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n          : null} */}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        <Text color=\"black\">{TranslateString(999, 'Approve Contract')}</Text>\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          PRV\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'PRV per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n  rgba(255, 0, 0, 1) 0%,\n  rgba(255, 154, 0, 1) 10%,\n  rgba(208, 222, 33, 1) 20%,\n  rgba(79, 220, 74, 1) 30%,\n  rgba(63, 218, 216, 1) 40%,\n  rgba(47, 201, 226, 1) 50%,\n  rgba(28, 127, 238, 1) 60%,\n  rgba(95, 21, 242, 1) 70%,\n  rgba(186, 12, 248, 1) 80%,\n  rgba(251, 7, 217, 1) 90%,\n  rgba(255, 0, 0, 1) 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background-color: ${(props) => props.theme.card.background};\n  border-radius: 0px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 60px;\n  position: relative;\n  text-align: center;\n  background-image: url('/images/bgBig.png');\n  background-repeat: no-repeat;\n  background-size:100% 102%;\n  background-position:center;\n  \n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice,ethPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n\n\n    if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n      const s = ethPrice.times(farm.lpTotalInQuoteToken);\n      const v =  s\n      ? `$${Number(s).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : '-'\n        console.log(\"ethtttt\",v,\"lpTotalInQuoteToken\",farm.lpTotalInQuoteToken)\n      return ethPrice.times(farm.lpTotalInQuoteToken)\n\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice,ethPrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'PRV'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'PRV' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent='space-between' alignItems='center'>\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly ?\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              :\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"primary\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text,Card } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Container from 'components/layout/Container'\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.primary};\n  margin-bottom: 24px;\n`\n\nconst Blurb = styled(Text)`\n  color: ${({theme}) => theme.colors.textSubtle};\n  font-size: 20px;\n  font-weight: 600;\n`\n\nconst StyledHero = styled.div`\n\npadding-bottom: 40px;\n  padding-top: 40px;\n  padding-left:80px;\n  padding-right:80px;\n`\n\nconst StyledContainer = styled(Container)`\n  display: flex;\n\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`\n\nconst LeftWrapper = styled.div`\n  flex: 1;\n  padding-right: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-right: 32px;\n  }\n`\n\nconst RightWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n  padding-left: 0;\n  margin-top: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0;\n    padding-left: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-left: 32px;\n  }\n`\n\nexport interface HeroProps{\n  tokenMode?: boolean\n}\n\n\nconst Hero = (HeroProps) => {\n  const TranslateString = useI18n()\n\n\n  return (\n    <StyledHero>\n      <StyledContainer>\n        <LeftWrapper>\n        <Title color=\"primary\">{TranslateString(999, 'Privacy Farms')}</Title>\n          <Blurb>{TranslateString(999, 'Stake LP tokens to earn PRV')}</Blurb>\n\n\n      <Blurb  color=\"secondary\">\n        {TranslateString(10000, 'Deposit Fee will be used to buyback PRV')}\n      </Blurb>\n        </LeftWrapper>\n        <RightWrapper>\n\n        {/* <img src='/images/ticket-bg.png' alt=\"place\"/> */}\n\n        </RightWrapper>\n      </StyledContainer>\n    </StyledHero>\n  )\n}\n\nexport default Hero\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text,Card } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Container from 'components/layout/Container'\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.primary};\n  margin-bottom: 24px;\n`\n\nconst Blurb = styled(Text)`\n  color: ${({theme}) => theme.colors.textSubtle};\n  font-size: 20px;\n  font-weight: 600;\n`\n\nconst StyledHero = styled.div`\n  padding-bottom: 40px;\n  padding-top: 40px;\n  padding-left:80px;\n  padding-right:80px;\n`\n\nconst StyledContainer = styled(Container)`\n  display: flex;\n\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`\n\nconst LeftWrapper = styled.div`\n  flex: 1;\n  padding-right: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-right: 32px;\n  }\n`\n\nconst RightWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n  padding-left: 0;\n  margin-top: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0;\n    padding-left: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-left: 32px;\n  }\n`\n\nexport interface HeroProps{\n  tokenMode?: boolean\n}\n\n\nconst TokenHero = (HeroProps) => {\n  const TranslateString = useI18n()\n\n\n  return (\n    <StyledHero>\n      <StyledContainer>\n        <LeftWrapper>\n          <Title color=\"primary\">{TranslateString(999, 'Privacy Pools')}</Title>\n          <Blurb>{TranslateString(999, 'Stake tokens to earn PRV')}</Blurb>\n          {/* <Blurb>{TranslateString(999, 'Deposit Fee will be used to buyback PRV')}</Blurb> */}\n          <Blurb  color=\"secondary\">\n        {TranslateString(10000, 'Deposit Fee will be used to buyback PRV')}\n      </Blurb>\n        </LeftWrapper>\n        <RightWrapper>\n\n        {/* <img src='/images/ticket-bg.png' alt=\"place\"/> */}\n\n        </RightWrapper>\n      </StyledContainer>\n    </StyledHero>\n  )\n}\n\nexport default TokenHero\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd,usePriceEthBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\nimport FarmsHero from './components/FarmsHero'\nimport TokenHero from './components/TokenHero'\n\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n\n  const ethprice = usePriceEthBusd();\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.prvPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n\n        if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n          totalValue = totalValue.times(ethprice);\n        }\n\n        \n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethPrice={ethprice}\n\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice,ethprice, ethereum],\n  )\n\n  return (\n    <Page>\n\n      {tokenMode?<TokenHero/>:<FarmsHero />}\n      {/* <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {\n          tokenMode ?\n            TranslateString(10002, 'Stake tokens to earn PRV')\n            :\n          TranslateString(320, 'Stake LP tokens to earn PRV')\n        }\n      </Heading> */}\n{/* \n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(10000, 'Deposit Fee will be used to buyback PRV')}\n      </Heading> */}\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      {/* <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive /> */}\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}