{"version":3,"sources":["utils/callHelpers.ts","components/UnlockButton.tsx","hooks/useTokenBalance.ts","views/Home/components/CardValue.tsx","hooks/useHarvest.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","BigNumber","times","pow","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","participateForest","blackContract","participate","gasPrice","soushHarvest","soushHarvestBnb","claimForest","claimReward","UnlockButton","props","TranslateString","useI18n","useWallet","connect","reset","onPresentConnectModal","useWalletModal","onClick","color","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","cakeContract","getContract","cakeABI","getCakeAddress","call","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","ethereum","fastRefresh","getTokenBalance","res","CardValue","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","useHarvest","farmPid","dispatch","useDispatch","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","multicall","masterChefABI","rawResults","results","index","fetchBalances","CakeHarvestBalance","earningsSum","style","lineHeight","CakeWalletBalance","cakeBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","text","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","eggPrice","usePriceCakeBusd","toNumber","earning","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","size","mb","src","alt","width","height","toFixed","id","disabled","length","fullWidth","StyledCakeStats","Row","CakeStats","burnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","prvPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","chrome","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","marginLeft","window","screen","marginRight","FarmStakingCard"],"mappings":"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","file":"static/js/16.54fe2c66.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const participateForest = async (blackContract, amount, account) => {\n  // console.log('amount', new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n  return blackContract.methods\n    .participate(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    // .participate(\"2\", 100)\n    .send({ from: account, gasPrice: '7000000000'  })\n    .on('transactionHash', (tx) => {\n      return tx\n    })\n}\n\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const claimForest = async (blackContract, account) => {\n  return blackContract.methods\n    .claimReward()\n    .send({ from: account})\n    .on('transactionHash', (tx) => {\n      return tx\n    })\n}\n","import React from 'react'\nimport { Button, useWalletModal, Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      <Text color=\"black\">{TranslateString(292, 'Unlock Wallet')}</Text>\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text color=\"textSubtle\" bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingPRV',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingPRV',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/bgBig.png');\n  background-repeat: no-repeat;\n  background-size:100% 102%;\n  background-position:center;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  font-size: 20px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"text\" size=\"xl\" mb=\"20px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/logo.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'PRV to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'PRV in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting PRV')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\nbackground-image: url('/images/bgBig.png');\n  background-repeat: no-repeat;\n  background-size:100% 102%;\n  background-position:center;\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 20px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  let prvPerBlock = 0;\n  if(farms && farms[0] && farms[0].prvPerBlock){\n    prvPerBlock = new BigNumber(farms[0].prvPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'PRV Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"20px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"20px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"20px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"20px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"20px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"20px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"20px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"20px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"20px\">{TranslateString(540, 'New PRV/block')}</Text>\n          <Text color=\"textSubtle\" bold fontSize=\"20px\">{prvPerBlock}</Text>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"20px\">Max Supply</Text>\n          <Text color=\"textSubtle\" bold fontSize=\"20px\">30,000,000 PRV</Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\nbackground-image: url('/images/bgBig.png');\nbackground-repeat: no-repeat;\nbackground-size:100% 102%;\nbackground-position:center;\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading style={{fontSize:\"2em\"}} size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\nbackground-image: url('/images/bgBig.png');\n  background-repeat: no-repeat;\n  background-size:100% 102%;\n  background-position:center;\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading style={{fontSize:\"2em\"}} mb=\"22px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'PrivacySwap'\n          }}\n          options={{\n            height: '300',\n            chrome: \"noheader, nofooter\",\n            width: \"100%\"\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  // background-image: url('/images/egg/3.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    // background-image: url('/images/egg/3.png'), url('/images/egg/3b.png');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        {/* <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"primary\">\n          {TranslateString(576, 'PrivacySwap')}\n        </Heading>\n        <Text>{TranslateString(578, 'The DeFi App that Aims to Bring Privacy Closer to You.')}</Text> */}\n      </Hero>\n      <div>\n        <Cards style={{marginLeft:`${window.screen.width > 900 ? \"50px\" : \"10px\"}` , marginRight:`${window.screen.width > 900 ? \"50px\" : \"10px\"}`}}>\n          <FarmStakingCard />\n          <TwitterCard/>\n          {/* <LotteryCard/> */}\n\n          <CakeStats />\n          <TotalValueLockedCard />\n\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}